# This docker-compose.yml lets you spin up the container with your local code
# mounted as a volume. 
#
# This builds the image.
#
#     docker-compose build
#
# This runs the container in which jupyter-lab executes with the mdx extension.
#
#     docker-compose up -d
#
# To begin developemnt after cloning this repo to your local system,
# do the following fro mthe root directory of the repo:
#
#     docker-compose exec jupyter bash
#
#     cd /home/jovyan/jupyterlab-mdx
#
# If there are files that you want to test that have been edited since you
# built the repository then
#
#     cp -r /home/joyyan/src/* .
#     yarn install               # only if package.json changed; otherwise can skip
#     yarn run build:lib         # compile TS â†’ lib/
#     yarn run build:labextension  # bundle into jupyterlab_mdx/labextension/
#     pip install --no-cache-dir -e .
#
##
# Once the container starts, at the command-prompt inside the container:
#
#     yarn run build   # transpiles ts -> js
#     yarn build:labextension:dev
#
# Run the unit tests afer it is has built
#
#     yarn test
#
# Once you pass tests, if you want to play with the extension then start up jupyter
# in the container:
#
#     jupyter lab --no-browser --ip=0.0.0.0 --allow-root
#
# Make sure you have exported UID, GID, and R.  R points
# at the directory containing all of your repos.  For example,
#
#     export UID=$(id -u)
#     export GID=$(id -g)
#     export R=$HOME/olemiss/repo

services:
  jupyter:
    build:
      context: .
      dockerfile: Dockerfile
    image: jupyterlab-mdx:latest
    ports:
      - "8888:8888"
    user: jovyan
    volumes:
      - ${R}:/home/jovyan/repo
    environment:
      JUPYTER_ENABLE_LAB: "yes"
      NB_UID: ${UID}
      NB_GID: ${GID}
